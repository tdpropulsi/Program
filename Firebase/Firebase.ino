
/**
 * Created by K. Suwatchai (Mobizt)
 *
 * Email: k_suwatchai@hotmail.com
 *
 * Github: https://github.com/mobizt/FirebaseJson
 *
 * Copyright (c) 2023 mobizt
 *
 */

#include <Arduino.h>
#if defined(ESP32) || defined(ARDUINO_RASPBERRY_PI_PICO_W)
#include <WiFi.h>
#elif defined(ESP8266)
#include <ESP8266WiFi.h>
#endif

#include <Firebase_ESP_Client.h>

// Provide the token generation process info.
#include <addons/TokenHelper.h>

// Provide the RTDB payload printing info and other helper functions.
#include <addons/RTDBHelper.h>

/* 1. Define the WiFi credentials */
#define WIFI_SSID "wifi bayar"
#define WIFI_PASSWORD "12345678"

// For the following credentials, see examples/Authentications/SignInAsUser/EmailPassword/EmailPassword.ino

/* 2. Define the API Key */
#define API_KEY "AIzaSyB3AhEYnuLIqsTAn3O3GaYn_9OaQtx6rdM"

/* 3. Define the RTDB URL */
#define DATABASE_URL "https://esp32-gilang-data-default-rtdb.asia-southeast1.firebasedatabase.app/"  //<databaseName>.firebaseio.com or <databaseName>.<region>.firebasedatabase.app

/* 4. Define the user Email and password that alreadey registerd or added in your project */
#define USER_EMAIL "gilangfajrulfalah@gmail.com"
#define USER_PASSWORD "12345678"

// double x[] = { 2.21157592143821, 1.91845243041487, 1.62622976818985, 1.33638170085965, 1.04574670246877, 0.87953729097029, 0.802153534799653, 0.724262293807299, 0.65531316459534, 0.724840143746502, 0.801658601050074, 0.878412268697874, 0.8989158032545, 0.89938683213145, 0.900130876143427, 0.900425071068738, 0.89932180121624, 0.946314083735258, 1.02105192135533, 1.09027962522303, 1.15018099841095, 1.19758496583272, 1.23046061602548, 1.24752636630622, 1.24781372079968, 1.23090898150461, 1.19754485852316, 1.14970127550003, 1.09004979528935, 1.02141878795231, 0.946766067665274, 0.899197021401779, 0.899863251571795, 0.899912245994274, 0.899883875594634, 0.899774600773141, 0.899668922608705, 0.899692407178688, 0.89980904021348, 0.899883998159673, 0.901855434438638, 0.922385307787087, 0.93397360749791, 0.931269731668428, 0.915295735703946, 0.899428982421826, 0.89962413212286, 0.899789442947154, 0.899953216115886, 0.899892377480906, 0.899667098803339, 0.899593208267521, 0.899793715330206, 0.899989700134094, 0.899881679718654, 0.899605740771348, 0.899575396385152, 0.899874100000171, 0.90006866380735, 0.899795945016652, 0.899377334692989, 0.899691534208209, 0.91359250882356, 0.994413554128169, 1.05963003229033, 1.10372776149601, 1.12467706719045, 1.12773612751152, 1.10115657878858, 1.04853876586974, 0.971262603442039, 0.89859988594634, 0.899779392949062, 0.90055925815742, 0.89983002621955, 0.89861560352531, 0.899629105588206, 0.945725444925452, 1.23910608639798, 1.53074636262396, 1.82010656334299, 2.11049140545113, 2.40917460671675, 2.30168555588866, 2.01522743486622, 1.72500060779151, 1.43274762647558, 1.14220267152259, 0.894491493296662, 0.826424468862433, 0.75217689519845, 0.673833751108118, 0.700956985305267, 0.775405144238556, 0.851155718601131, 0.9009637094623, 0.899790224277496, 0.899202500447148, 0.899408531389769, 0.900445170562991, 0.919641158843293, 0.996579196922619, 1.06789584017488, 1.1311641817097, 1.18337149886825, 1.22159190285406, 1.24382274445207, 1.24930371243584, 1.23807460294738, 1.21052530100297, 1.16758809913896, 1.11124484081877, 1.04457942829487, 0.971305906426911, 0.901034288666808, 0.899502001669472, 0.899636400392251, 0.899745759489174, 0.899861319799422, 0.899896966798475, 0.899799364939956, 0.899684677250042, 0.899669716591856, 0.899538091797477, 0.916635358672207, 0.931735983655361, 0.933520569266505, 0.921307238835222, 0.901068987780551, 0.899831887795285, 0.899663677968865, 0.899609382107985, 0.899778065170756, 0.899961606525947, 0.899893268466162, 0.899652705030683, 0.899586752170228, 0.899811185728122, 0.900008999782749, 0.89986838932541, 0.899568167661613, 0.899571800466496, 0.899941340275328, 0.900129483833417, 0.899605192138571, 0.898761215681302, 0.969764000799307, 1.03957976491171, 1.09183254827904, 1.11887738489436, 1.12990800701704, 1.11259792919159, 1.0688389173305, 0.998911430941267, 0.913620656813775, 0.899420624815758, 0.899133889649427, 0.900184972225225, 0.900746862528637, 0.899159506176946, 0.896573178106239, 1.14195823597353, 1.43267156894219, 1.72501678018539, 2.01525464883881, 2.30169937291313, 2.40918546027952 };

// Define Firebase Data object
FirebaseData fbdo;

FirebaseAuth auth;
FirebaseConfig config;

unsigned long sendDataPrevMillis = 0;

unsigned long count = 0;

void setup() {

  Serial.begin(115200);

  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(300);
  }
  Serial.println();
  Serial.print("Connected with IP: ");
  Serial.println(WiFi.localIP());
  Serial.println();

  Serial.printf("Firebase Client v%s\n\n", FIREBASE_CLIENT_VERSION);

  /* Assign the api key (required) */
  config.api_key = API_KEY;

  /* Assign the user sign in credentials */
  auth.user.email = USER_EMAIL;
  auth.user.password = USER_PASSWORD;

  /* Assign the RTDB URL (required) */
  config.database_url = DATABASE_URL;

  /* Assign the callback function for the long running token generation task */
  config.token_status_callback = tokenStatusCallback;  // see addons/TokenHelper.h

  // Or use legacy authenticate method
  // config.database_url = DATABASE_URL;
  // config.signer.tokens.legacy_token = "<database secret>";

  Firebase.begin(&config, &auth);

  // Comment or pass false value when WiFi reconnection will control by your code or third party library
  Firebase.reconnectWiFi(true);
}

void loop() {
  // Flash string (PROGMEM and  (FPSTR), String C/C++ string, const char, char array, string literal are supported
  // in all Firebase and FirebaseJson functions, unless F() macro is not supported.

  // Firebase.ready() should be called repeatedly to handle authentication tasks.

  if (Firebase.ready() && (millis() - sendDataPrevMillis > 10 || sendDataPrevMillis == 0)) {
    sendDataPrevMillis = millis();

    // FirebaseJson json;
    // json.setDoubleDigits(3);
    // json.add("value", count);

    // Serial.printf("Set json... %s\n", Firebase.RTDB.setJSON(&fbdo, "/test/json", &json) ? "ok" : fbdo.errorReason().c_str());

    // Serial.printf("Get json... %s\n", Firebase.RTDB.getJSON(&fbdo, "/test/json") ? fbdo.to<FirebaseJson>().raw() : fbdo.errorReason().c_str());

    // FirebaseJson jVal;
    // Serial.printf("Get json ref... %s\n", Firebase.RTDB.getJSON(&fbdo, "/test/json", &jVal) ? jVal.raw() : fbdo.errorReason().c_str());

    FirebaseJsonArray arr;
    // arr.setFloatDigits(2);
    arr.setDoubleDigits(6);
    // arr.add(2.21157592143821, 1.91845243041487, 1.62622976818985, 1.33638170085965, 1.04574670246877, 0.87953729097029, 0.802153534799653, 0.724262293807299, 0.65531316459534, 0.724840143746502, 0.801658601050074, 0.878412268697874, 0.8989158032545, 0.89938683213145, 0.900130876143427, 0.900425071068738, 0.89932180121624, 0.946314083735258, 1.02105192135533, 1.09027962522303, 1.15018099841095, 1.19758496583272, 1.23046061602548, 1.24752636630622, 1.24781372079968, 1.23090898150461, 1.19754485852316, 1.14970127550003, 1.09004979528935, 1.02141878795231, 0.946766067665274, 0.899197021401779, 0.899863251571795, 0.899912245994274, 0.899883875594634, 0.899774600773141, 0.899668922608705, 0.899692407178688, 0.89980904021348, 0.899883998159673, 0.901855434438638, 0.922385307787087, 0.93397360749791, 0.931269731668428, 0.915295735703946, 0.899428982421826, 0.89962413212286, 0.899789442947154, 0.899953216115886, 0.899892377480906, 0.899667098803339, 0.899593208267521, 0.899793715330206, 0.899989700134094, 0.899881679718654, 0.899605740771348, 0.899575396385152, 0.899874100000171, 0.90006866380735, 0.899795945016652, 0.899377334692989, 0.899691534208209, 0.91359250882356, 0.994413554128169, 1.05963003229033, 1.10372776149601, 1.12467706719045, 1.12773612751152, 1.10115657878858, 1.04853876586974, 0.971262603442039, 0.89859988594634, 0.899779392949062, 0.90055925815742, 0.89983002621955, 0.89861560352531, 0.899629105588206, 0.945725444925452, 1.23910608639798, 1.53074636262396, 1.82010656334299, 2.11049140545113, 2.40917460671675, 2.30168555588866, 2.01522743486622, 1.72500060779151, 1.43274762647558, 1.14220267152259, 0.894491493296662, 0.826424468862433, 0.75217689519845, 0.673833751108118, 0.700956985305267, 0.775405144238556, 0.851155718601131, 0.9009637094623, 0.899790224277496, 0.899202500447148, 0.899408531389769, 0.900445170562991, 0.919641158843293, 0.996579196922619, 1.06789584017488, 1.1311641817097, 1.18337149886825, 1.22159190285406, 1.24382274445207, 1.24930371243584, 1.23807460294738, 1.21052530100297, 1.16758809913896, 1.11124484081877, 1.04457942829487, 0.971305906426911, 0.901034288666808, 0.899502001669472, 0.899636400392251, 0.899745759489174, 0.899861319799422, 0.899896966798475, 0.899799364939956, 0.899684677250042, 0.899669716591856, 0.899538091797477, 0.916635358672207, 0.931735983655361, 0.933520569266505, 0.921307238835222, 0.901068987780551, 0.899831887795285, 0.899663677968865, 0.899609382107985, 0.899778065170756, 0.899961606525947, 0.899893268466162, 0.899652705030683, 0.899586752170228, 0.899811185728122, 0.900008999782749, 0.89986838932541, 0.899568167661613, 0.899571800466496, 0.899941340275328, 0.900129483833417, 0.899605192138571, 0.898761215681302, 0.969764000799307, 1.03957976491171, 1.09183254827904, 1.11887738489436, 1.12990800701704, 1.11259792919159, 1.0688389173305, 0.998911430941267, 0.913620656813775, 0.899420624815758, 0.899133889649427, 0.900184972225225, 0.900746862528637, 0.899159506176946, 0.896573178106239, 1.14195823597353, 1.43267156894219, 1.72501678018539, 2.01525464883881, 2.30169937291313, 2.40918546027952);

    Serial.printf("Set array... %s\n", Firebase.RTDB.setArray(&fbdo, "/test/array", &arr) ? "ok" : fbdo.errorReason().c_str());

    Serial.printf("Get array... %s\n", Firebase.RTDB.getArray(&fbdo, "/test/array") ? fbdo.to<FirebaseJsonArray>().raw() : fbdo.errorReason().c_str());

    // Serial.printf("Push json... %s\n", Firebase.RTDB.pushJSON(&fbdo, "/test/push", &json) ? "ok" : fbdo.errorReason().c_str());

    // json.set("value", count + 0.29745);
    // Serial.printf("Update json... %s\n\n", Firebase.RTDB.updateNode(&fbdo, "/test/push/" + fbdo.pushName(), &json) ? "ok" : fbdo.errorReason().c_str());

    count++;
  }
}
